{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/angular.module.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/assignment1/assignment1.component.html","webpack:///./src/app/assignment1/assignment1.component.ts","webpack:///./src/app/assignment2/assignment2.component.html","webpack:///./src/app/assignment2/assignment2.component.ts","webpack:///./src/app/assignment2/standardcostaverage/standardcostaverage.dialog.ts","webpack:///./src/app/assignment2/standardcostaverage/standrdcostaverage.dialog.html","webpack:///./src/app/services/api.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDatepickerModule,\r\n  MatDialogModule,\r\n  MatExpansionModule,\r\n  MatGridListModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatNativeDateModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatRadioModule,\r\n  MatRippleModule,\r\n  MatSidenavModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatTooltipModule,\r\n  MatSelectModule,\r\n  MatOptionModule,\r\n  MatLineModule\r\n  \r\n} from '@angular/material';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport '@angular/cdk';\r\n\r\n@NgModule({\r\n imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    MatNativeDateModule,\r\n    ReactiveFormsModule,\r\n    MatLineModule\r\n  ],\r\n\r\n  exports: [\r\n    MatLineModule,\r\n     BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    MatNativeDateModule,\r\n    ReactiveFormsModule,\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule\r\n  ],\r\n})\r\nexport class AngularStyles { }\r\n","import { NgModule }             from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { Assignment1Component } from './assignment1/assignment1.component';\r\nimport { Assignment2Component } from './assignment2/assignment2.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'Assignment1', pathMatch: 'full' },\r\n  { path: 'Assignment1', component: Assignment1Component },\r\n  { path: 'Assignment2', component: Assignment2Component }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ \r\n    RouterModule.forRoot(routes) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule {}\r\n","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n\\r\\n<!DOCTYPE html>\\r\\n<html>\\r\\n\\r\\n<head>\\r\\n  <base href=\\\"/\\\" />\\r\\n  <link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\">\\r\\n</head>\\r\\n<body>\\r\\n\\r\\n  <nav mat-tab-nav-bar style=\\\" margin-bottom:1%; margin-top :1%\\\">\\r\\n    <a mat-tab-link  [routerLink]=\\\"['/Assignment1']\\\" >Assignment 1</a>\\r\\n    <a mat-tab-link  [routerLink]=\\\"['/Assignment2']\\\" >Assignment 2</a>\\r\\n\\r\\n  </nav>\\r\\n\\r\\n\\r\\n  <router-outlet></router-outlet>\\r\\n</body>\\r\\n\"","import { Component, OnInit } from '@angular/core';\nimport { MatTabNav } from '@angular/material';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\n\n\nimport { AngularStyles } from './angular.module';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n\nimport { APIService } from './services/api.service';\n\n\n\nimport { Assignment1Component } from './assignment1/assignment1.component'\nimport { Assignment2Component } from './assignment2/assignment2.component'\nimport { StandardCostAvgDialog } from './assignment2/standardcostaverage/standardcostaverage.dialog'\n\n\n@NgModule({\n  declarations: [\n      AppComponent,\n    Assignment1Component,\n    Assignment2Component,\n    StandardCostAvgDialog\n  ],\n  imports: [\n      BrowserModule,\n      AppRoutingModule,\n    AngularStyles,\n    HttpModule\n  ],\n    providers: [APIService],\n  bootstrap: [AppComponent],\n  entryComponents: [StandardCostAvgDialog]\n})\nexport class AppModule { }\n","module.exports = \"<mat-card>\\r\\n    <h2>Database Logs</h2>\\r\\n    <mat-card-content>\\r\\n\\r\\n\\r\\n        <div>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n              \\r\\n                <mat-paginator [pageSizeOptions]=pageSizeOptions [pageSize]=\\\"15\\\"></mat-paginator>\\r\\n                \\r\\n              <mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n              \\r\\n\\r\\n                <ng-container matColumnDef=\\\"databaseLogId\\\">\\r\\n                  <mat-header-cell *matHeaderCellDef mat-sort-header=\\\"databaseLogId\\\">Database Log Id</mat-header-cell>\\r\\n                  <mat-cell *matCellDef=\\\"let db_logs\\\"> {{db_logs.databaseLogId}} </mat-cell>\\r\\n                </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n                <ng-container matColumnDef=\\\"postTime\\\">\\r\\n                  <mat-header-cell *matHeaderCellDef mat-sort-header=\\\"postTime\\\">Post Time</mat-header-cell>\\r\\n                  <mat-cell *matCellDef=\\\"let db_logs\\\"> {{db_logs.postTime}} </mat-cell>\\r\\n                </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n                          <ng-container matColumnDef=\\\"tsql\\\">\\r\\n                            <mat-header-cell  *matHeaderCellDef mat-sort-header=\\\"tsql\\\">Tsql</mat-header-cell>\\r\\n                            <mat-cell *matCellDef=\\\"let db_logs\\\"> {{db_logs.tsql}} </mat-cell>\\r\\n                          </ng-container>\\r\\n                  \\r\\n\\r\\n                      <ng-container matColumnDef=\\\"xmlEvent\\\">\\r\\n                        <mat-header-cell  *matHeaderCellDef mat-sort-header=\\\"xmlEvent\\\">Xml Event</mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let db_logs\\\"> {{db_logs.xmlEvent}} </mat-cell>\\r\\n                      </ng-container>\\r\\n              \\r\\n      \\r\\n              \\r\\n                      <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n                      <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\r\\n                      </mat-row>\\r\\n                    </mat-table>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { PageEvent } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport { Response } from '@angular/http';\r\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\r\nimport { APIService } from '../services/api.service';\r\nimport { DatabaseLog } from '../models/databaselog.model';\r\n\r\n@Component({\r\n  selector: 'app-assignment1',\r\n  templateUrl: './assignment1.component.html',\r\n  styleUrls: [],\r\n  providers: []\r\n})\r\n\r\n \r\n\r\nexport class Assignment1Component implements OnInit {\r\n\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  dataSource= new MatTableDataSource();\r\n\r\n\r\n  pageSizeOptions = [5, 10, 15, 25, 100];\r\n  displayedColumns = [\"databaseLogId\", \"postTime\", \"tsql\", \"xmlEvent\"];\r\n\r\n\r\n  constructor(private client: APIService,\r\n    private router: Router) {\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n  async ngOnInit() {\r\n\r\n    this.dataSource = new MatTableDataSource(await this.client.GetAllDatabaseLogs());\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n   \r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  applyFilter(filterValue: string) {\r\n    filterValue = filterValue.trim(); // Remove whitespace\r\n    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\r\n    this.dataSource.filter = filterValue;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n  <h2>Product Search</h2>\\r\\n  <mat-card-content>\\r\\n\\r\\n\\r\\n\\r\\n    <div>\\r\\n      <div style=\\\"width:500px; display:inline\\\">\\r\\n        <mat-form-field s>\\r\\n          <input matInput [(ngModel)]=\\\"query\\\" placeholder=\\\"779,782\\\" />\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <button mat-raised-button color=\\\"primary\\\" style=\\\"display:inline\\\" (click)=\\\"searchIds()\\\">Search</button>\\r\\n    </div>\\r\\n\\r\\n\\r\\n\\r\\n    <div>\\r\\n      <mat-form-field>\\r\\n        <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n      </mat-form-field>\\r\\n    </div>\\r\\n\\r\\n    <mat-paginator [pageSizeOptions]=pageSizeOptions [pageSize]=\\\"15\\\"></mat-paginator>\\r\\n\\r\\n    <mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n\\r\\n\\r\\n      <ng-container matColumnDef=\\\"productId\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\\\"productId\\\">Product Id</mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let prod\\\"> {{prod.productId}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n\\r\\n      <ng-container matColumnDef=\\\"exists\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\\\"exists\\\">Product Exists</mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let prod\\\"> {{prod.exists}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n      <ng-container matColumnDef=\\\"productName\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\\\"productName\\\">Product Name</mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let prod\\\"> {{prod.productName}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n      <ng-container matColumnDef=\\\"productNumber\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\\\"productNumber\\\">Product Number</mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let prod\\\"> {{prod.productNumber}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n      <ng-container matColumnDef=\\\"averageStandardCost\\\">\\r\\n        <mat-header-cell *matHeaderCellDef>Average Standard Cost / Year (ASC)</mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let prod\\\">\\r\\n          <button *ngIf=\\\"prod.exists\\\" mat-raised-button color=\\\"primary\\\" (click)=\\\"showAvg(prod.averageStandardCost,prod.productName)\\\">Show ASC</button>\\r\\n        </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n\\r\\n      <ng-container matColumnDef=\\\"locationName\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\\\"locationName\\\">Location Name</mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let prod\\\"> {{prod.locationName}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n      <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n      <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\r\\n      </mat-row>\\r\\n    </mat-table>\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Response } from '@angular/http';\r\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\r\nimport { APIService } from '../services/api.service';\r\nimport { DatabaseLog } from '../models/databaselog.model';\r\nimport { StandardCostAvgDialog } from './standardcostaverage/standardcostaverage.dialog'\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA, PageEvent, MatDialogConfig } from '@angular/material';\r\nimport { Product } from '../models/product.model';\r\n\r\n@Component({\r\n  selector: 'app-assignment2',\r\n  templateUrl: './assignment2.component.html',\r\n  styleUrls: [],\r\n  providers: []\r\n})\r\n\r\n\r\n\r\nexport class Assignment2Component implements OnInit {\r\n\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  dataSource = new MatTableDataSource<Product>();\r\n  query: String;\r\n  notFound: String[]\r\n\r\n  pageSizeOptions = [5, 10, 15, 25, 100];\r\n  displayedColumns = [\"productId\",\"exists\",\"productName\", \"productNumber\", \"averageStandardCost\", \"locationName\"];\r\n\r\n\r\n  constructor(private client: APIService,\r\n    private router: Router,\r\n    public dialog: MatDialog) {\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n  async ngOnInit() {\r\n\r\n\r\n\r\n  }\r\n\r\n  async searchIds() {\r\n    var q = this.query;\r\n    q = q.replace(/^\\,+|\\,+$/g, \"\").replace(/ /g, \"\");\r\n    this.dataSource = new MatTableDataSource(await this.client.GetSearchedProductIds(q));\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  showAvg(asc,name): void {\r\n    let dialogRef = this.dialog.open(StandardCostAvgDialog, {\r\n      width: '75%',\r\n      data: {\r\n        list: asc,\r\n        name: name\r\n      }\r\n  });\r\n  }\r\n\r\n\r\n  applyFilter(filterValue: string) {\r\n    filterValue = filterValue.trim(); // Remove whitespace\r\n    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\r\n    this.dataSource.filter = filterValue;\r\n  }\r\n\r\n\r\n\r\n}\r\n","import { Inject, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA, PageEvent, MatSnackBar } from '@angular/material';\r\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\r\nimport { ProductStandardCostYearAverage } from '../../models/product.model'\r\n\r\n@Component({\r\n    selector: 'standrdcostaverage-dialog',\r\n    templateUrl: 'standrdcostaverage.dialog.html'\r\n})\r\n\r\nexport class StandardCostAvgDialog implements OnInit\r\n{\r\n\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  dataSource = new MatTableDataSource<ProductStandardCostYearAverage>();\r\n  query: String;\r\n  notFound: String[]\r\n\r\n  pageSizeOptions = [5, 10, 15, 25, 100];\r\n  displayedColumns = [\"year\",\"average\"];\r\n\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any) {};\r\n\r\n  name: string\r\n\r\n  ngOnInit() {\r\n    this.name = this.data.name;\r\n    this.dataSource = new MatTableDataSource(this.data.list)\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","module.exports = \"<mat-card>\\r\\n  <h2>Standard Cost Average for {{name}} / Year</h2>\\r\\n  <mat-card-content>\\r\\n\\r\\n\\r\\n\\r\\n    <mat-paginator [pageSizeOptions]=pageSizeOptions [pageSize]=\\\"15\\\"></mat-paginator>\\r\\n\\r\\n    <mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n\\r\\n\\r\\n\\r\\n      <ng-container matColumnDef=\\\"average\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\\\"average\\\">Standard Cost Average</mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let pch\\\"> {{pch.average}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n      <ng-container matColumnDef=\\\"year\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\\\"year\\\">Year</mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let pch\\\"> {{pch.year}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n      <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n      <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\r\\n      </mat-row>\\r\\n    </mat-table>\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import { Injectable } from '@angular/core';\r\nimport { Headers, Http, Response, RequestOptions, RequestMethod } from '@angular/http';\r\n\r\nimport { DatabaseLog } from '../models/databaselog.model'\r\nimport { Product } from '../models/product.model'\r\n\r\nimport { Observable } from \"rxjs\";\r\n\r\n\r\n\r\n@Injectable()\r\nexport class APIService {\r\n\r\n  constructor(\r\n    private http: Http\r\n  ) { };\r\n\r\n\r\n  async GetAllDatabaseLogs(): Promise<DatabaseLog[]> {\r\n    var url = location.origin + \"/api/DatabaseLogs\";\r\n    return await this.http.get(url)\r\n      .toPromise()\r\n      .then(x => {\r\n        return x.json();\r\n      });\r\n  \r\n  }\r\n\r\n\r\n  async GetSearchedProductIds(ids): Promise<Product[]> {\r\n    var url = location.origin + \"/api/Products/Search?ids=\" + ids;\r\n    return await this.http.get(url)\r\n      .toPromise()\r\n      .then(x => {\r\n        return x.json();\r\n      });\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}